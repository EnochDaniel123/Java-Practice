// In Java, the finally block is used in combination with the try and catch blocks to handle exceptions.
  The finally block contains code that will be executed regardless of whether an exception is thrown or caught. 
  This ensures that certain cleanup tasks or essential operations are performed,
  regardless of whether an exception occurred.


  code:
  
 


class HanN {public static void main(String[] args )
{
   try {
       System.out.println("Learn");
       int a=20; int b=0,c;
       c = a/b;
        System.out.println(c);
         System.out.println("Like");
         
   }
   catch(Exception e)
   { System.out.println("can not not divide by b");
   int x = 20; int y = 0; int z;
   z = x/y ;
   System.out.println(z);
   System.out.println("cAN NOT DIVIDE BY ZERO ");
}
finally { System.out.println("share");}
 System.out.println("main method ended");}
}



// output :

java -cp /tmp/0oUdPQvSnw/HanN
Learn
can not not divide by b
ERROR!
share
Exception in thread "main" java.lang.ArithmeticException: / by zero
	at HanN.main(HanN.java:18)

=== Code Exited With Errors ===



